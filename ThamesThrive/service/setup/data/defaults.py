import os

from ThamesThrive.service.utils.date import now_in_utc
from ThamesThrive.service.plugin.domain.register import Form, FormGroup, FormField, FormComponent
from ThamesThrive.config import ThamesThrive
from ThamesThrive.domain.bridge import Bridge
from ThamesThrive.domain.event_source import EventSource
from ThamesThrive.domain.named_entity import NamedEntity

_local_dir = os.path.dirname(__file__)

open_rest_source_bridge = Bridge(
    id="778ded05-4ff3-4e08-9a86-72c0195fa95d",
    type="rest",
    name="REST API Bridge",
    description="API /track collector",
    config={
        "static_profile_id": False
    },
    form=Form(groups=[
        FormGroup(
            name="REST API Bridge Configuration",
            fields=[
                FormField(
                    id="static_profile_id",
                    name="Allow static profile ID.",
                    description="This feature allows you to use profile IDs that were not generated by ThamesThrive. "
                                "The delivered profile ID will be used to create a non-existing profile ID. However, "
                                "please note that using this feature can pose a security risk. It's important to read "
                                "ThamesThrive documentation carefully before using it.",
                    component=FormComponent(type="bool", props={"label": "Allow static, remotely defined profile ID"})
                )
            ])
    ])
)

open_webhook_source_bridge = Bridge(
    id="3d8bb87e-28d1-4a38-b19c-d0c1fbb71e22",
    type="webhook",
    name="API Webhook Bridge",
    description="API Webhook collector",
    config={
        "generate_profile": False,
        "replace_profile_id": "",
        "replace_session_id": ""
    },
    form=Form(groups=[
        FormGroup(
            name="API Webhook Bridge Configuration",
            description="A webhook typically gathers data without creating a profile or session. However, "
                        "if you want to create a profile and session for the collected data, you can set up the "
                        "configuration for it here.",
            fields=[
                FormField(
                    id="generate_profile",
                    name="Create profile and session for collected data.",
                    description="By default, webhook events do not include session or profile IDs. "
                                "However, if you enable this settings, it will generate the profile and session "
                                "ID for this event.",

                    component=FormComponent(type="bool", props={"label": "Create profile and session"})
                ),
                FormField(
                    id="replace_profile_id",
                    name="Set profile ID",
                    description="This setting will only work when `Create session and profile` is enabled. "
                                "If you intend to substitute or set the Profile ID with information from the payload, "
                                "you can either use the data provided below or leave it blank if you don't wish "
                                "to set any profile or want it to have a random ID. It is crucial to ensure "
                                "that the Profile ID is secure and not easily predictable since simple Profile "
                                "IDs may pose security threats.",
                    component=FormComponent(type="text", props={"label": "Set profile"})
                ),
                FormField(
                    id="replace_session_id",
                    name="Set session ID",
                    description="This setting will only work when `Create session and profile` is enabled. "
                                "If you intend to substitute or set the Session ID with information from the payload, "
                                "you can either use the data provided below or leave it blank if you don't wish "
                                "to set any session or want it to have a random ID. It is crucial to ensure "
                                "that the Session ID is secure and not easily predictable since simple Session "
                                "IDs may pose security threats.",
                    component=FormComponent(type="text", props={"label": "Set session"})
                )
            ])
    ])
)

with open(os.path.join(_local_dir, "manual/redirect_manual.md"), "r", encoding="utf-8") as fh:
    manual = fh.read()

redirect_bridge = Bridge(
    id='a495159f-91be-476d-a4e5-1b2d7e005403',
    type='redirect',
    name="Redirect URL Bridge",
    description="Redirects URLs and registers events.",
    manual=manual
)

# This is how you set-up default event source
test_event_source = EventSource(
    id=ThamesThrive.demo_source,
    type=["rest"],
    name="System Test Source",
    channel="Test",
    description="This is test event-source. Feel free to remove it.",
    bridge=NamedEntity(**open_rest_source_bridge.model_dump()),
    timestamp=now_in_utc(),
    tags=["test"],
    groups=["Test"]
)

default_db_data = {
    "bridge": [
        open_rest_source_bridge.model_dump(mode='json'),
        open_webhook_source_bridge.model_dump(mode='json'),
        redirect_bridge.model_dump(mode='json')
    ],
    'event-source': [
        test_event_source.model_dump(mode='json')
    ]
}
